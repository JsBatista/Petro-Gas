"""Add avg_last_24 function

Revision ID: 5c950b20564c
Revises: 26c08a8eb0d2
Create Date: 2024-09-12 19:50:34.808681

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes
from alembic_utils.pg_extension import PGExtension
from sqlalchemy import text as sql_text
from alembic_utils.pg_function import PGFunction
from sqlalchemy import text as sql_text

# revision identifiers, used by Alembic.
revision = '5c950b20564c'
down_revision = '26c08a8eb0d2'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    public_avg_last_24 = PGFunction(
        schema="public",
        signature="avg_last_24(_current_date timestamp, _ids text[] default '{}')",
        definition='RETURNS TABLE (equipment varchar(255)\n               , date_trunc   timestamp\n               , avg float8)\n\t\t\t\tLANGUAGE plpgsql AS\n\t\t\t\t$func$\n\t\t\t\tBEGIN\n\t\t\t\t\tIF _ids <> \'{}\'::text[] THEN\n\t\t\t\t\t\tRETURN QUERY\n\t\t\t\t\t\tselect \n\t\t\t\t\t\t\tequipment_id as equipment, \n\t\t\t\t\t\t\tdate_trunc(\'hour\', "timestamp"), \n\t\t\t\t\t\t\tavg(value) \n\t\t\t\t\t\tfrom \n\t\t\t\t\t\t\tsensor_data sd \n\t\t\t\t\t\twhere \n\t\t\t\t\t\t\t"timestamp" < _current_date and\n\t\t\t\t\t\t\t"timestamp" > (_current_date - \'1 day\'::INTERVAL) and \n\t\t\t\t\t\t\tequipment_id = ANY(_ids)\n\t\t\t\t\t\tgroup by  \n\t\t\t\t\t\t\tequipment_id, \n\t\t\t\t\t\t\tdate_trunc(\'hour\', "timestamp") \n\t\t\t\t\t\torder by \n\t\t\t\t\t\t\tequipment_id, \n\t\t\t\t\t\t\tdate_trunc(\'hour\', "timestamp");\n\t\t\t\t\t\t\n\t\t\t\t\tELSE\n\t\t\t\t\t\tRETURN QUERY\n\t\t\t\t\t\tselect \n\t\t\t\t\t\t\tequipment_id as equipment, \n\t\t\t\t\t\t\tdate_trunc(\'hour\', "timestamp"), \n\t\t\t\t\t\t\tavg(value) \n\t\t\t\t\t\tfrom \n\t\t\t\t\t\t\tsensor_data sd \n\t\t\t\t\t\twhere \n\t\t\t\t\t\t\t"timestamp" < _current_date and\n\t\t\t\t\t\t\t"timestamp" > (_current_date - \'1 day\'::INTERVAL)\n\t\t\t\t\t\tgroup by  \n\t\t\t\t\t\t\tequipment_id, \n\t\t\t\t\t\t\tdate_trunc(\'hour\', "timestamp") \n\t\t\t\t\t\torder by \n\t\t\t\t\t\t\tequipment_id, \n\t\t\t\t\t\t\tdate_trunc(\'hour\', "timestamp");\n\t\t\t\t\tEND IF;\n\t\t\t\tEND\n\t\t\t\t$func$'
    )
    op.create_entity(public_avg_last_24)

    public_uuid_ossp = PGExtension(
        schema="public",
        signature="uuid-ossp"
    )
    op.drop_entity(public_uuid_ossp)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    public_uuid_ossp = PGExtension(
        schema="public",
        signature="uuid-ossp"
    )
    op.create_entity(public_uuid_ossp)

    public_avg_last_24 = PGFunction(
        schema="public",
        signature="avg_last_24(_current_date timestamp, _ids text[] default '{}')",
        definition='RETURNS TABLE (equipment varchar(255)\n               , date_trunc   timestamp\n               , avg float8)\n\t\t\t\tLANGUAGE plpgsql AS\n\t\t\t\t$func$\n\t\t\t\tBEGIN\n\t\t\t\t\tIF _ids <> \'{}\'::text[] THEN\n\t\t\t\t\t\tRETURN QUERY\n\t\t\t\t\t\tselect \n\t\t\t\t\t\t\tequipment_id as equipment, \n\t\t\t\t\t\t\tdate_trunc(\'hour\', "timestamp"), \n\t\t\t\t\t\t\tavg(value) \n\t\t\t\t\t\tfrom \n\t\t\t\t\t\t\tsensor_data sd \n\t\t\t\t\t\twhere \n\t\t\t\t\t\t\t"timestamp" < _current_date and\n\t\t\t\t\t\t\t"timestamp" > (_current_date - \'1 day\'::INTERVAL) and \n\t\t\t\t\t\t\tequipment_id = ANY(_ids)\n\t\t\t\t\t\tgroup by  \n\t\t\t\t\t\t\tequipment_id, \n\t\t\t\t\t\t\tdate_trunc(\'hour\', "timestamp") \n\t\t\t\t\t\torder by \n\t\t\t\t\t\t\tequipment_id, \n\t\t\t\t\t\t\tdate_trunc(\'hour\', "timestamp");\n\t\t\t\t\t\t\n\t\t\t\t\tELSE\n\t\t\t\t\t\tRETURN QUERY\n\t\t\t\t\t\tselect \n\t\t\t\t\t\t\tequipment_id as equipment, \n\t\t\t\t\t\t\tdate_trunc(\'hour\', "timestamp"), \n\t\t\t\t\t\t\tavg(value) \n\t\t\t\t\t\tfrom \n\t\t\t\t\t\t\tsensor_data sd \n\t\t\t\t\t\twhere \n\t\t\t\t\t\t\t"timestamp" < _current_date and\n\t\t\t\t\t\t\t"timestamp" > (_current_date - \'1 day\'::INTERVAL)\n\t\t\t\t\t\tgroup by  \n\t\t\t\t\t\t\tequipment_id, \n\t\t\t\t\t\t\tdate_trunc(\'hour\', "timestamp") \n\t\t\t\t\t\torder by \n\t\t\t\t\t\t\tequipment_id, \n\t\t\t\t\t\t\tdate_trunc(\'hour\', "timestamp");\n\t\t\t\t\tEND IF;\n\t\t\t\tEND\n\t\t\t\t$func$'
    )
    op.drop_entity(public_avg_last_24)

    # ### end Alembic commands ###
